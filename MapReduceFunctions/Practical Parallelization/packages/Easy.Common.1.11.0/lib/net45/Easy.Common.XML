<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy.Common</name>
    </assembly>
    <members>
        <member name="T:Easy.Common.AccessorBuilder">
            <summary>
            Provides a very fast and efficient property setter and getter access as well as object creation.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.Build(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Builds an <see cref="T:Easy.Common.AccessorBuilder"/> which provides easy access to all of the <see cref="T:System.Reflection.PropertyInfo"/> of the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.Build``1(System.Boolean,System.Boolean)">
            <summary>
            Builds an <see cref="T:Easy.Common.Accessor`1"/> which provides easy access to all of the <see cref="T:System.Reflection.PropertyInfo"/> of the given <typeparamref name="TInstance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildSetter``2(System.String,System.Boolean)">
            <summary>
            Builds a property setter for a given instance type of <typeparamref name="TInstance"/> and property type of <typeparamref name="TProperty"/> with the name of <paramref name="propertyName"/>.
            <remarks>
            The setters for a <typeparamref name="TInstance"/> of <see lang="struct"/> are 
            intentionally not supported as changing the values of immutable types is a bad practice.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildSetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property setter for a given instance type of <typeparamref name="TInstance"/> and property type of <typeparamref name="TProperty"/>.
            <remarks>
            The setters for a <typeparamref name="TInstance"/> of <see lang="struct"/> are 
            intentionally not supported as changing the values of immutable types is a bad practice.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildGetter``2(System.String,System.Boolean)">
            <summary>
            Builds a property getter for a given instance type of <typeparamref name="TInstance"/> and property type of <typeparamref name="TProperty"/> with the name of <paramref name="propertyName"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildGetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property getter for a given instance type of <typeparamref name="TInstance"/> and property type of <typeparamref name="TProperty"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildSetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property setter for when both the instance and property type are unknown.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildGetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property getter for when both the instance and property type are unknown.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildSetter``1(System.String,System.Boolean)">
            <summary>
            Builds a property setter for a given instance type of <typeparamref name="TInstance"/> and property name of <paramref name="propertyName"/>.
            <remarks>
            The setters for a <typeparamref name="TInstance"/> of <see lang="struct"/> are 
            intentionally not supported as changing the values of immutable types is a bad practice.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildSetter``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property setter for a given instance type of <typeparamref name="TInstance"/> and property of <paramref name="propertyInfo"/>.
            <remarks>
            The setters for a <typeparamref name="TInstance"/> of <see lang="struct"/> are 
            intentionally not supported as changing the values of immutable types is a bad practice.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildGetter``1(System.String,System.Boolean)">
            <summary>
            Builds a property getter for a given instance type of <typeparamref name="TInstance"/> and property name of <paramref name="propertyName"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildGetter``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Builds a property getter for a given instance type of <typeparamref name="TInstance"/> and property of <paramref name="propertyInfo"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildInstanceCreator``1">
            <summary>
            Builds a delegate for creating an instance of the <typeparamref name="TInstance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.AccessorBuilder.BuildInstanceCreator``1(System.Reflection.ConstructorInfo)">
            <summary>
            Builds a delegate for creating an instance of the <typeparamref name="TInstance"/> from its <paramref name="constructor"/>.
            <remarks>The order of arguments passed to the delegate should match the order set by the constructor.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the count parameters passed to the constructor does not match the required constructor parameter count.</exception>
            <exception cref="T:System.InvalidCastException">Thrown if parameters passed to the constructor are of invalid type.</exception>
            </summary>
        </member>
        <member name="T:Easy.Common.Accessor">
            <summary>
            An abstraction for gaining fast access to all of the <see cref="T:System.Reflection.PropertyInfo"/> of the given <see cref="P:Easy.Common.Accessor.Type"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Accessor.Comparer">
            <summary>
            Gets the <see cref="T:System.StringComparer"/> used by the <see cref="T:Easy.Common.Accessor"/> to find the properties on the given instance. 
            </summary>
        </member>
        <member name="P:Easy.Common.Accessor.Item(System.Object,System.String)">
            <summary>
            Gets or sets the value of the given <paramref name="propertyName"/> for the given <paramref name="instance"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.Accessor.Type">
            <summary>
            Gets the type of the object this instance supports.
            </summary>
        </member>
        <member name="P:Easy.Common.Accessor.IgnoreCase">
            <summary>
            Gets the flag indicating whether property names should be treated in a case sensitive manner.
            </summary>
        </member>
        <member name="P:Easy.Common.Accessor.IncludesNonPublic">
            <summary>
            Gets the flag indicating whether non-public properties should be supported by this instance.
            </summary>
        </member>
        <member name="P:Easy.Common.Accessor.Properties">
            <summary>
            Gets the properties to which this instance can provide access to.
            </summary>
        </member>
        <member name="T:Easy.Common.Accessor`1">
            <summary>
            An abstraction for gaining fast access to all of the <see cref="T:System.Reflection.PropertyInfo"/> of the given <typeparamref name="TInstance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Accessor`1.Get(`0,System.String)">
            <summary>
            Gets the value of the given <paramref name="propertyName"/> for the given <paramref name="instance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Accessor`1.Set(`0,System.String,System.Object)">
            <summary>
            Sets the value of the given <paramref name="propertyName"/> for the given <paramref name="instance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Accessor`1.Get``1(`0,System.String)">
            <summary>
            Gets the value of a property selected by the given <paramref name="propertyName"/> for the given <paramref name="instance"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Accessor`1.Set``1(`0,System.String,``0)">
            <summary>
            Sets the value of the given <paramref name="propertyName"/> for the given <paramref name="instance"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.ActiveDirectoryHelper">
            <summary>
            Provides methods for obtaining user roles and details from <c>ActiveDirectory</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.ActiveDirectoryHelper.GetUserDetails(System.String,System.String)">
            <summary>
            Retrieves user details from <c>Active Directory</c>
            </summary>
            <param name="userName">The user's user-name</param>
            <param name="domainName">The domain name e.g EUR</param>
            <returns>Dictionary containing user details</returns>
        </member>
        <member name="M:Easy.Common.ActiveDirectoryHelper.GetRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves user roles from a list of domains.
            </summary>
            <param name="userName">The user's user-name</param>
            <param name="domains">The list of domains to look for the user's roles</param>
            <returns>The user roles</returns>
        </member>
        <member name="T:Easy.Common.ApplicationHelper">
            <summary>
            A set of helpful methods
            </summary>
        </member>
        <member name="P:Easy.Common.ApplicationHelper.IsDebugBuild">
            <summary>
            Gets the flag indicating whether this application has been compiled in <c>DEBUG</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.ApplicationHelper.GetProcessStartupDuration">
            <summary>
            Returns the time taken to start the current process.
            </summary>
        </member>
        <member name="M:Easy.Common.ApplicationHelper.GetSystemDetails">
            <summary>
            Returns the system details on which the application executes.
            </summary>
            <returns>The system details</returns>
        </member>
        <member name="M:Easy.Common.ApplicationHelper.GetProcessorName">
            <summary>
            Returns the full CPU name using the registry. 
            See <see href="http://stackoverflow.com/questions/2376139/get-full-cpu-name-without-wmi"/>
            </summary>
            <returns>The CPU Name</returns>
        </member>
        <member name="T:Easy.Common.Base36">
            <summary>
            A Base36 Encoder and Decoder
            </summary>
        </member>
        <member name="M:Easy.Common.Base36.Encode(System.Int64)">
            <summary>
            Encode the given number into a <see cref="T:Easy.Common.Base36"/>string.
            </summary>
            <param name="input">The number to encode.</param>
            <returns>Encoded <paramref name="input"/> as string.</returns>
        </member>
        <member name="M:Easy.Common.Base36.Decode(System.String)">
            <summary>
            Decode the <see cref="T:Easy.Common.Base36"/> encoded string into a long.
            </summary>
            <param name="input">The number to decode.</param>
            <returns>Decoded <paramref name="input"/> as long.</returns> 
        </member>
        <member name="T:Easy.Common.Base64">
            <summary>
            Base 64 encoder using URL and filename-safe alphabet.
            </summary>
        </member>
        <member name="M:Easy.Common.Base64.Encode(System.Byte[])">
            <summary>
            Encodes the given <see langword="byte"/>[] into a URL and filename-safe Base64 encoded string.
            </summary>
            <param name="arg">The argument to encode</param>
            <returns>Encoded result as string</returns>
        </member>
        <member name="M:Easy.Common.Base64.Decode(System.String)">
            <summary>
            Decodes the given URL and filename-safe Base64 string into a 
            <see langword="byte"/>[].
            </summary>
            <param name="arg">The argument to decode</param>
            <returns>Decoded result as <see langword="byte"/>[]</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the given 
            <paramref name="arg"/> is not a valid Base64 encoded string.
            </exception>
        </member>
        <member name="T:Easy.Common.Clock">
            <summary>
            This class provides a high resolution clock by using the new API available in <c>Windows 8</c>/ 
            <c>Windows Server 2012</c> and higher. In all other operating systems it returns time by using 
            a manually tuned and compensated <c>DateTime</c> which takes advantage of the high resolution
            available in <see cref="T:System.Diagnostics.Stopwatch"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Clock.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.Clock"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.Clock.IsPrecise">
            <summary>
            Gets the flag indicating whether the instance of <see cref="T:Easy.Common.Clock"/> provides high resolution time.
            <remarks>
            <para>
            This only returns <c>True</c> on <c>Windows 8</c>/<c>Windows Server 2012</c> and higher.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:Easy.Common.Clock.UtcNow">
            <summary>
            Gets the date and time in <c>UTC</c>.
            </summary>
        </member>
        <member name="P:Easy.Common.Clock.Now">
            <summary>
            Gets the local date time.
            </summary>
        </member>
        <member name="M:Easy.Common.Clock.Dispose">
            <summary>
            Releases all resources used by the instance of <see cref="T:Easy.Common.Clock"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.ConfigReader">
            <summary>
            A class returning configuration values as static objects.
            </summary>
        </member>
        <member name="M:Easy.Common.ConfigReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Easy.Common.ConfigReader"/> class. 
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Could not retrieve a <see cref="T:System.Collections.Specialized.NameValueCollection"/> object with the application settings data.
            </exception>
        </member>
        <member name="M:Easy.Common.ConfigReader.#ctor(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:Easy.Common.ConfigReader.#ctor(System.IO.FileInfo,System.Xml.Linq.XName,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Easy.Common.ConfigReader"/> class. 
            by loading <paramref name="configFile"/> and reading the values from it.
            </summary>
            <param name="configFile">Path to the configuration file</param>
            <param name="element">Name of the node which stores the key value pairs</param>
            <param name="keyAttribute">Attribute identifying the key</param>
            <param name="valueAttribute">Attribute identifying the value</param>
        </member>
        <member name="P:Easy.Common.ConfigReader.ConfigFile">
            <summary>
            Gets the file storing the config entries.
            </summary>
        </member>
        <member name="P:Easy.Common.ConfigReader.Settings">
            <summary>
            Gets all of the settings retrieved from the configuration.
            </summary>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="values"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="values">The set of values associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.String@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Int16@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Int32@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Int64@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.UInt16@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.UInt32@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.UInt64@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Single@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Double@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Decimal@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Boolean@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            <remarks>
            The following values can be parsed (case-insensitive): 
                <c>True/False</c>,
                <c>Yes/No</c>,
                <c>0/1</c>
            </remarks>
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryReadStringAsCsv(System.String,System.String,System.String[]@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="separator">The <see cref="T:System.String"/> separating the values</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetTicks(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetMilliseconds(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetSeconds(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetMinutes(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetHours(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetDays(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryGetWeeks(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.String,System.DateTime@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="formatSpecifier">The format used to parse the value as <paramref name="value"/></param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.IO.FileInfo@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.IO.DirectoryInfo@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.ConfigReader.TryRead(System.String,System.Uri@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="T:Easy.Common.CountryCodesMapping">
            <summary>
            Maps three letter country codes to country names
            </summary>
        </member>
        <member name="P:Easy.Common.CountryCodesMapping.Mappings">
            <summary>
            Returns a copy of the Country-Code mappings.
            <remarks>The mappings use the <see cref="P:System.StringComparer.OrdinalIgnoreCase"/></remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.CountryCodesMapping.TryGetCountryName(System.String,System.String@)">
            <summary>
            Returns the country name for the given three-letter country code.
            <remarks>
            For more information see: https://en.wikipedia.org/wiki/Three-letter_acronym
            </remarks>
            </summary>
            <param name="code">The three-letter country code, case does not matter</param>
            <param name="countryName">The country name</param>
            <returns><c>True</c> if mapping exists otherwise <c>False</c></returns>
        </member>
        <member name="T:Easy.Common.DynamicDictionary">
            <summary>
            Provides an abstraction for an object to be used dynamically as a key value pair
            where the property is the key and value is an <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Easy.Common.DynamicDictionary"/>.
            </summary>
            <param name="ignoreCase">
            The flag indicating whether keys should be treated regardless of the case.
            </param>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Add the given <paramref name="item"/> to this instance.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Clear">
            <summary>
            Removes all the items from this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether this instance contains the given <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of this instance to the given <paramref name="array"/>, starting at a particular <paramref name="array"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the given <paramref name="item"/> from this instance.
            </summary>
        </member>
        <member name="P:Easy.Common.DynamicDictionary.Count">
            <summary>
            Gets the number of elements contained in this instance.
            </summary>
        </member>
        <member name="P:Easy.Common.DynamicDictionary.IsReadOnly">
            <summary>
            Determines whether this instance is <c>Read-Only</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys and values of this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys and values of this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this instance contains an element with the given <paramref name="key"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element for the given <paramref name="key"/> and associated <paramref name="value"/> to this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the given <paramref name="key"/> from this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get the value associated to the given <paramref name="key"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the value stored against the given <paramref name="key"/>.
            <remarks>If the given <paramref name="key"/> does not exist, <c>NULL</c> is returned.</remarks>
            </summary>
        </member>
        <member name="P:Easy.Common.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of this instance.
            </summary>
        </member>
        <member name="P:Easy.Common.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Attempts to get the member.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Attempts to set the member.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Attempts to invoke the member.
            </summary>
        </member>
        <member name="M:Easy.Common.DynamicDictionary.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Attempts to delete the member.
            </summary>
        </member>
        <member name="T:Easy.Common.EasyPool">
            <summary>
            A generic thread safe high performance object pool.
            </summary>
        </member>
        <member name="M:Easy.Common.EasyPool.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Easy.Common.EasyPool"/>
            </summary>
        </member>
        <member name="P:Easy.Common.EasyPool.TotalRegistrations">
            <summary>
            Returns the total number of registered types in the <see cref="F:Easy.Common.EasyPool._pools"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the underlying pool has been disposed</exception>
        </member>
        <member name="M:Easy.Common.EasyPool.Register``1(System.Func{``0},System.UInt32)">
            <summary>
            Registers with the pool the function to create a new instance of <typeparamref name="T"/> 
            and the <paramref name="maximumCount"/> of objects to create in the pool.
            </summary>
            <param name="factory">The factory used to create a new instance of <typeparamref name="T"/></param>
            <param name="maximumCount">The maximum number of objects to store in the pool</param>
        </member>
        <member name="M:Easy.Common.EasyPool.Get``1">
            <summary>
            Returns an object of type <typeparamref name="T"/> from the pool.
            </summary>
            <returns>Object of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Easy.Common.EasyPool.Put``1(``0)">
            <summary>
            Puts an object of type <typeparamref name="T"/> back in the pool.
            </summary>
            <param name="item">Object of type <typeparamref name="T"/></param>
        </member>
        <member name="M:Easy.Common.EasyPool.GetCountOfObjectsInThePool``1">
            <summary>
            Returns the total number of instances of the <typeparamref name="T"/>
            currently in the pool.
            </summary>
        </member>
        <member name="M:Easy.Common.EasyPool.Dispose">
            <summary>
            Consumes and disposes every object in the pool.
            </summary>
        </member>
        <member name="T:Easy.Common.Ensure">
            <summary>
            Helper class that will <see langword="throw"/> exceptions when conditions are not satisfied.
            </summary>
        </member>
        <member name="M:Easy.Common.Ensure.That``1(System.Boolean,System.String)">
            <summary>
            Ensures that the given expression is <see langword="true"/>.
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="condition">Condition to test/ensure</param>
            <param name="message">Message for the exception</param>
            <exception>
                Thrown when <cref>TException</cref> <paramref name="condition"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.That(System.Boolean,System.String)">
            <summary>
            Ensures given <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="condition">Condition to test</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="condition"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.Not``1(System.Boolean,System.String)">
            <summary>
            Ensures given <paramref name="condition"/> is <see langword="false"/>.
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="condition">Condition to test</param>
            <param name="message">Message for the exception</param>
            <exception> 
                Thrown when <paramref name="condition"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.Not(System.Boolean,System.String)">
            <summary>
            Ensures given <paramref name="condition"/> is <see langword="false"/>.
            </summary>
            <param name="condition">Condition to test</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="condition"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.NotNull``1(``0,System.String)">
            <summary>
            Ensures given <see langword="object"/> is not null.
            </summary>
            <typeparam name="T">Type of the given <see langword="object"/> .</typeparam>
            <param name="value"> Value of the <see langword="object"/> to check for <see langword="null"/> reference.</param>
            <param name="argName"> Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="value"/> is null
            </exception>
            <returns> The <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Easy.Common.Ensure.Equal``1(``0,``0,System.String)">
            <summary>
            Ensures given objects are equal.
            </summary>
            <typeparam name="T">Type of objects to compare for equality</typeparam>
            <param name="left">Left <see langword="object"/>.</param>
            <param name="right">Right <see langword="object"/>.</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="left"/> not equal to <paramref name="right"/>
            </exception>
            <remarks>Null values will cause an exception to be thrown</remarks>
        </member>
        <member name="M:Easy.Common.Ensure.NotEqual``1(``0,``0,System.String)">
            <summary>
            Ensures given objects are not equal.
            </summary>
            <typeparam name="T">Type of objects to compare for equality</typeparam>
            <param name="left">First Value to Compare</param>
            <param name="right">Second Value to Compare</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="left"/> equal to <paramref name="right"/>
            </exception>
            <remarks>Null values will cause an exception to be thrown</remarks>
        </member>
        <member name="M:Easy.Common.Ensure.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Ensures a given <paramref name="collection"/> is not null or empty.
            </summary>
            <typeparam name="T">Collection type.</typeparam>
            <param name="collection">Collection to check.</param>
            <param name="message">Message for the exception</param>
            <returns>The evaluated collection.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="collection"/> is empty.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.NotNullOrEmptyOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures the given string is not <see langword="null"/> or empty or whitespace.
            </summary>
            <param name="value"><c>String</c> <paramref name="value"/> to check.</param>
            <param name="message">Message for the exception</param>
            <returns>Value to return if it is not null, empty or whitespace.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="value"/> is null or empty or whitespace.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.Exists(System.IO.DirectoryInfo)">
            <summary>
            Ensures given <see cref="T:System.IO.DirectoryInfo"/> exists.
            </summary>
            <param name="directoryInfo">DirectoryInfo object representing the directory to check for existence.</param>
            <returns>DirectoryInfo to return if the directory exists.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="directoryInfo"/> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                Thrown when <paramref name="directoryInfo"/> is not found.
            </exception>
            <exception cref="T:System.IO.IOException">
                A device such as a disk drive is not ready.
            </exception>
        </member>
        <member name="M:Easy.Common.Ensure.Exists(System.IO.FileInfo)">
            <summary>
            Ensures given <paramref name="fileInfo"/> exists.
            </summary>
            <param name="fileInfo">FileInfo object representing the file to check for existence.</param>
            <returns>FileInfo to return if the file exists.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="fileInfo"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                Thrown when <paramref name="fileInfo"/> does not exist.
            </exception>
        </member>
        <member name="T:Easy.Common.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.GetPage``1(System.Collections.Generic.IEnumerable{``0},System.UInt32,System.UInt32)">
            <summary>
            Convenience method for retrieving a specific page of items within the given <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">The type of element in the sequence</typeparam>
            <param name="sequence">The sequence of elements</param>
            <param name="pageIndex">The 0-based index for the page</param>
            <param name="pageSize">The size of the elements in the page</param>
            <returns>The returned paged sequence</returns>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an Enumerable into a read-only collection
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Validates that the <paramref name="sequence"/> is not null and contains items.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.ToStringSeparated``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="T">The type of data in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">The sequence of data to separate by the given <paramref name="separator"/></param>
            <param name="separator">The string to use for separating each items in the <paramref name="sequence"/>.</param>
            <returns>The string containing the data in the <paramref name="sequence"/> separated by the <paramref name="separator"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.ToCharSeparated``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Converts <paramref name="sequence"/> to a <paramref name="delimiter"/> separated string
            </summary>
            <typeparam name="T">The type of data in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">The sequence of data to separate by the given <paramref name="delimiter"/></param>
            <param name="delimiter">The character to use for separating each items in the <paramref name="sequence"/>.</param>
            <returns>The string containing the data in the <paramref name="sequence"/> separated by the <paramref name="delimiter"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.ToCommaSeparated``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts <paramref name="sequence"/> to a comma separated string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an <paramref name="action"/> for each of the items in the sequence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence"></param>
            <param name="action"></param>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.SelectRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects a random element from an Enumerable with only one pass (O(N) complexity); 
            It contains optimizations for arguments that implement ICollection{T} by using the 
            Count property and the ElementAt LINQ method. The ElementAt LINQ method itself contains 
            optimizations for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.SelectRandom``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Selects a random element from an Enumerable with only one pass (O(N) complexity); 
            It contains optimizations for arguments that implement ICollection{T} by using the 
            Count property and the ElementAt LINQ method. The ElementAt LINQ method itself contains 
            optimizations for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes a <paramref name="sequence"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Randomizes a <paramref name="sequence"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all the distinct elements of the given source where <c>distictness</c> is determined
            via a projection and the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the <paramref name="sequence"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns all the distinct elements of the given source where <c>distictness</c> is determined
            via a projection and the <paramref name="comparer"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.EnumerableExtensions.HandleExceptionWhenYieldReturning``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Exception,System.Boolean},System.Action{System.Exception})">
            <summary>
            Allows exception handling when yield returning an IEnumerable
            <example>
            myList.HandleExceptionWhenYieldReturning{int}(e => 
            {
                Logger.Error(e);
                throw new SybaseException("Exception occurred", e);
            }, e => e is AseException || e is DbException);
            </example>
            </summary>
            <typeparam name="T">Type of data to enumerate.</typeparam>
            <param name="sequence">The sequence of <typeparamref name="T"/> which will be enumerated.</param>
            <param name="exceptionPredicate">The predicate specifying which exception(s) to handle.</param>
            <param name="actionToExecuteOnException">The action to which the handled exception will be passed to.</param>
            <returns></returns>
        </member>
        <member name="T:Easy.Common.Extensions.AssemblyExtensions">
            <summary>
            A set of extension methods for <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.AssemblyExtensions.GetFrameworkVersion(System.Reflection.Assembly)">
            <summary>
            Obtains the .NET framework version against which the <paramref name="assembly"/> has been built.
            </summary>
            <param name="assembly">The assembly</param>
            <returns>The .NET framework version</returns>
        </member>
        <member name="M:Easy.Common.Extensions.AssemblyExtensions.GetAssemblyLocation(System.Reflection.Assembly)">
            <summary>
            Obtains the location from which the <paramref name="assembly"/> was loaded.
            <remarks>
            <para>
            The <c>CodeBase</c> is a URL to the place where the file was found, while the <c>Location</c> is 
            the path from where it was actually loaded. For example, if the assembly was downloaded from the 
            web, its <c>CodeBase</c> may start with “http://”, but its <c>Location</c> may start with “C:\”. 
            If the file was shadow copied, the <c>Location</c> would be the path to the copy of the file in the 
            shadow-copy directory.
            </para>
            <para>
            Note  that the <c>CodeBase</c> is not guaranteed to be set for assemblies in the GAC. 
            <c>Location</c> will always be set for assemblies loaded from disk however.
            </para>
            </remarks>
            </summary>
            <param name="assembly">The assembly for which location is returned</param>
            <returns>The location as <see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.AssemblyExtensions.GetAssemblyCodeBase(System.Reflection.Assembly)">
            <summary>
            Obtains the location from which the <paramref name="assembly"/> was found.
            <remarks>
            <para>
            The <c>CodeBase</c> is a URL to the place where the file was found, while the <c>Location</c> is 
            the path from where it was actually loaded. For example, if the assembly was downloaded from the 
            web, its <c>CodeBase</c> may start with “http://”, but its <c>Location</c> may start with “C:\”. 
            If the file was shadow copied, the <c>Location</c> would be the path to the copy of the file in the 
            shadow-copy directory.
            </para>
            <para>
            Note  that the <c>CodeBase</c> is not guaranteed to be set for assemblies in the GAC. 
            <c>Location</c> will always be set for assemblies loaded from disk however.
            </para>
            </remarks>
            </summary>
            <param name="assembly">The assembly for which location is returned</param>
            <returns>The location as <see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.AssemblyExtensions.IsOptimized(System.Reflection.Assembly)">
            <summary>
            Determines whether the given <paramref name="assembly"/> has been compiled in <c>Release</c> mode.
            Credit to: <see href="http://www.hanselman.com/blog/HowToProgrammaticallyDetectIfAnAssemblyIsCompiledInDebugOrReleaseMode.aspx"/>
            </summary>
            <param name="assembly">The assembly to examine</param>
            <returns><c>True</c> if the <paramref name="assembly"/> is optimized otherwise <c>False</c></returns>
        </member>
        <member name="T:Easy.Common.Extensions.ByteExtensions">
            <summary>
            Provides a set of helper methods for working with <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.ByteExtensions.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares the given <paramref name="left"/> with <paramref name="right"/>.
            </summary>
            <returns><c>True</c> if the two are equal otherwise <c>False</c></returns>
        </member>
        <member name="T:Easy.Common.Extensions.DateTimeExtensions">
            <summary>
            Extensions for DateTime
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.DateTimeExtensions.Epoch">
            <summary>
            Epoch represented as DateTime
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.ToEpochMilliseconds(System.DateTime)">
            <summary>
            Converts a given <see cref="T:System.DateTime"/> to milliseconds from Epoch.
            </summary>
            <param name="dateTime">A given <see cref="T:System.DateTime"/></param>
            <returns>Milliseconds since Epoch</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.ToEpochSeconds(System.DateTime)">
            <summary>
            Converts a given <see cref="T:System.DateTime"/> to seconds from Epoch.
            </summary>
            <param name="dateTime">A given <see cref="T:System.DateTime"/></param>
            <returns>The Unix time stamp</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Checks the given date is between the two provided dates
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.IsLastDayOfTheMonth(System.DateTime)">
            <summary>
            Returns whether the given date is the last day of the month
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Returns whether the given date falls in a weekend
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Determines if a given year is a LeapYear or not.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.Age(System.DateTime)">
            <summary>
            Returns the age based on <paramref name="birthDay"/>.
            </summary>
            <param name="birthDay">The birthday for which age should be calculated</param>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.ToShamsiDateYmd(System.DateTime)">
            <summary>
            Convert DateTime to Shamsi Date (YYYY/MM/DD)
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.ToShamsiDateDmy(System.DateTime)">
            <summary>
            Convert DateTime to Shamsi Date (DD/MM/YYYY)
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DateTimeExtensions.ToShamsiDate(System.DateTime)">
            <summary>
            Convert DateTime to Shamsi String
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key or the <paramref name="defaultValue"/> if it does not exist.
            </summary>
            <param name="dictionary">The Source Dictionary</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The default value to return if an item with the specified <paramref name="key"/> does not exist.</param>
            <returns>The value associated with the specified key or the <paramref name="defaultValue"/> if it does not exist.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DictionaryExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a <see cref="T:System.Collections.Specialized.NameValueCollection"/> as a Dictionary
            </summary>
            <param name="namedValueCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.Extensions.DictionaryExtensions.ToConcurrentDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> from an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The dictionary key</typeparam>
            <typeparam name="TValue">The dictionary value</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns>The <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/></returns>
        </member>
        <member name="T:Easy.Common.Extensions.DoubleExtensions">
            <summary>
            Provides a set of helper methods for working with <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.DoubleExtensions.GetDecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places for a given <paramref name="value"/>.
            </summary>
            <param name="value">The double value</param>
            <returns>The number of decimal places</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DoubleExtensions.Floor(System.Double,System.UInt32)">
            <summary>
            Returns the Floor of the given <paramref name="value"/> to the specified <paramref name="decimalPlaces"/> decimal places.
            </summary>
            <param name="value">The double value</param>
            <param name="decimalPlaces">The number of decimal places</param>
            <returns>The Floor as double value</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DoubleExtensions.Ceiling(System.Double,System.UInt32)">
            <summary>
            Returns the Ceiling of the given <paramref name="value"/> to the specified <paramref name="decimalPlaces"/> decimal places.
            </summary>
            <param name="value">The double value</param>
            <param name="decimalPlaces">The number of decimal places</param>
            <returns>The Ceiling as double value</returns>
        </member>
        <member name="M:Easy.Common.Extensions.DoubleExtensions.EqualsFuzzy(System.Double,System.Double,System.Double)">
            <summary>
            Determines if two double values are almost equal based on a specified tolerance.
            </summary>
            <param name="left">The left double</param>
            <param name="right">The right double</param>
            <param name="epsilon">The tolerance</param>
            <returns>Result of equality</returns>
        </member>
        <member name="T:Easy.Common.Extensions.ExpressionExtensions">
            <summary>
            Provides a set of helpful methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the name of the property specified by the <paramref name="selector"/>.
            </summary>
            <typeparam name="TInstance">The type of the model whose property is to be selected.</typeparam>
            <typeparam name="TProperty">The type of the property which should be selected.</typeparam>
        </member>
        <member name="M:Easy.Common.Extensions.ExpressionExtensions.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> specified by the <paramref name="selector"/>.
            </summary>
            <typeparam name="TInstance">The type of the model whose property is to be selected.</typeparam>
            <typeparam name="TProperty">The type of the property to be selected.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <param name="instance">The instance for which the property should be selected.</param>
        </member>
        <member name="T:Easy.Common.Extensions.FileAndDirectoryInfoExtensions">
            <summary>
            Provides a set of useful methods for working with <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.GetSizeInByte(System.IO.DirectoryInfo)">
            <summary>
            Returns the size in bytes of the <paramref name="directoryInfo"/> represented by the <paramref name="directoryInfo"/> instance.
            </summary>
            <param name="directoryInfo">The <paramref name="directoryInfo"/> to get the size of.</param>
            <returns>The size of <paramref name="directoryInfo"/> in bytes.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.IsHidden(System.IO.DirectoryInfo)">
            <summary>
            Indicates if a given <paramref name="directoryInfo"/> is hidden.
            </summary>
            <param name="directoryInfo">The <paramref name="directoryInfo"/> to check.</param>
            <returns>Boolean indicating if the <paramref name="directoryInfo"/> is hidden.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.IsHidden(System.IO.FileInfo)">
            <summary>
            Indicates if a given <paramref name="fileInfo"/> is hidden.
            </summary>
            <param name="fileInfo">The <paramref name="fileInfo"/> to check.</param>
            <returns>
            Boolean indicating if the <paramref name="fileInfo"/> is hidden.
            </returns>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Renames the given <paramref name="fileInfo"/> to <paramref name="newName"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.ReadAllLines(System.IO.FileInfo)">
            <summary>
            Lazily reads all the lines in the <paramref name="fileInfo"/> without requiring a file lock.
            <remarks>
            This method is preferred over the <see cref="M:System.IO.File.ReadAllLines(System.String)"/> which requires a file lock
            which may result <see cref="T:System.IO.IOException"/> if the file is opened exclusively by another process such as <c>Excel</c>.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.ReadAllLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Lazily reads all the lines in the <paramref name="fileInfo"/> without requiring a file lock.
            <remarks>
            This method is preferred over the <see cref="M:System.IO.File.ReadAllLines(System.String)"/> which requires a file lock
            which may result <see cref="T:System.IO.IOException"/> if the file is opened exclusively by another process such as <c>Excel</c>.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.EnumerateDirectoriesSafe(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Enumerates every directory inside the <paramref name="directory"/> without throwing <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.FileAndDirectoryInfoExtensions.EnumerateFilesSafe(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Enumerates every file inside the <paramref name="directory"/> without throwing <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.GenericExtensions">
            <summary>
            A set of extension methods for generic types.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.GenericExtensions.CachedIlShallow">
            <summary>
            This dictionary caches the delegates for each 'to-clone' type.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.ToDynamic``1(``0,System.Boolean)">
            <summary>
            Converts the given <paramref name="object"/> to a <see cref="T:Easy.Common.DynamicDictionary"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.IsDefault``1(``0)">
            <summary>
            Returns <c>True</c> if <paramref name="object"/> has the default value of <typeparamref name="T"/>.
            </summary>
            <param name="object">The object to check for default.</param>
            <returns><c>True</c> if <paramref name="object"/> has default or null value otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.GetUninitializedInstance``1">
            <summary>
            Returns an uninitialized instance of the <typeparamref name="T"/> without calling any of its constructor(s).
            <see href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject.aspx"/>
            </summary>
            <remarks>
            Because the new instance of the object is initialized to zero and no constructors are run, 
            the object might not represent a state that is regarded as valid by that object. 
            The current method should only be used for deserialization when the user intends to immediately
            populate all fields. It does not create an uninitialized string, 
            since creating an empty instance of an immutable type serves no purpose.
            </remarks>
            <typeparam name="T">Generic Type</typeparam>
            <returns>An instance of type <typeparamref name="T"/> 
            with all its <c>non-static</c> fields initialized to its default value.
            </returns>
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.GetPropertyNames``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Gets all the private, public, inherited instance property names for the given <paramref name="@object"/>.
            <remarks>This method can be used to return both a <c>public</c> or <c>non-public</c> property names.</remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.CloneShallowUsingIl``1(``0)">
            <summary>    
            Generic cloning method that clones an object using IL.    
            Only the first call of a certain type will hold back performance.    
            After the first call, the compiled IL is executed.    
            </summary>    
            <typeparam name="T">Type of object to clone</typeparam>    
            <param name="myObject">Object to clone</param>    
            <returns>Cloned object</returns>    
        </member>
        <member name="M:Easy.Common.Extensions.GenericExtensions.CloneDeepUsingIl``1(``0)">
            <summary>
            Performs a deep copy of the object using the by generating IL.
            Only the first call for a certain type will have impact on performance; After the first call, the compiled IL is executed.
            <see href="http://whizzodev.blogspot.co.uk/2008/06/object-deep-cloning-using-il-in-c.html"/>
            </summary>    
            <typeparam name="T">The type of object being cloned.</typeparam>    
            <param name="myObject">The object instance to clone.</param>    
            <returns>the cloned object</returns>    
        </member>
        <member name="T:Easy.Common.Extensions.Int64Extensions">
            <summary>
            Extension methods for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.FromEpochMilliseconds(System.Int64)">
            <summary>
            Converts milliseconds since Epoch to <see cref="T:System.DateTime"/>
            </summary>
            <param name="epochMilliseconds">Milliseconds since Epoch as <see cref="T:System.Int64"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Times(System.Int64)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <paramref name="times"/> item.
            </summary>
            <param name="times">The number of items to include in the result</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Times(System.Int64,System.Action)">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Times``1(System.Int64,System.Func{``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Times``1(System.Int64,System.Func{System.Int64,``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Ticks(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Ticks</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Milliseconds(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Milliseconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Seconds(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Seconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Minutes(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Minutes</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Hours(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Hours</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Days(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Days</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int64Extensions.Weeks(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Weeks</c>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.Int32Extensions">
            <summary>
            Extension methods for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Times(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <paramref name="times"/> item.
            </summary>
            <param name="times">The number of items to include in the result</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Times(System.Int32,System.Action)">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Times``1(System.Int32,System.Func{``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Ticks(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Ticks</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Milliseconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Milliseconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Seconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Seconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Minutes(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Minutes</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Hours(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Hours</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Days(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Days</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int32Extensions.Weeks(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Weeks</c>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.Int16Extensions">
            <summary>
            Extension methods for <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Times(System.Int16)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <paramref name="times"/> item.
            </summary>
            <param name="times">The number of items to include in the result</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Times(System.Int16,System.Action{System.Int16})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Times(System.Int16,System.Action)">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Times``1(System.Int16,System.Func{``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Times``1(System.Int16,System.Func{System.Int16,``0})">
            <summary>
            Executes the given <paramref name="actionFn"/> <paramref name="times"/> times and returns the result of each execution.
            </summary>
            <param name="times">The number of times the <paramref name="actionFn"/> should be executed</param>
            <param name="actionFn">The action to execute</param>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Ticks(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Ticks</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Milliseconds(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Milliseconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Seconds(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Seconds</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Minutes(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Minutes</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Hours(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Hours</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Days(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Days</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.Int16Extensions.Weeks(System.Int16)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> represented by <paramref name="number"/> as <c>Weeks</c>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.RandomExtensionsTests">
            <summary>
            Provides a set of useful methods for working with <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.RandomExtensionsTests.GenerateRandomBetween(System.Random,System.Double,System.Double)">
            <summary>
            Generates a random <see cref="T:System.Double"/> between the given <paramref name="min"/> and <paramref name="max"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.RandomExtensionsTests.GenerateRandomSequence(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random set of numbers between the given <paramref name="min"/> and <paramref name="max"/>.
            <remarks>
            <paramref name="max"/> is exclusive. Credit goes to: <see href="http://codereview.stackexchange.com/a/61372"/>
            </remarks>
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.StreamExtensions">
            <summary>
            A set of extension methods for <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StreamExtensions.GetElements(System.IO.Stream,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets a sequence containing every element with the name equal to <paramref name="name"/>.
            </summary>
            <param name="stream">The stream containing XML</param>
            <param name="name">The name of the elements to return</param>
            <param name="ignoreCase">The flag indicating whether the name should be looked up in a case sensitive manner</param>
            <returns>The sequence containing all the elements <see cref="T:System.Xml.Linq.XElement"/> matching the <paramref name="name"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StreamExtensions.GetElements(System.IO.Stream,System.Xml.Linq.XName,System.Xml.XmlReaderSettings,System.Boolean)">
            <summary>
            Gets a sequence containing every element with the name equal to <paramref name="name"/>.
            </summary>
            <param name="stream">The stream containing XML</param>
            <param name="name">The name of the elements to return</param>
            <param name="settings">The settings used by the <see cref="T:System.Xml.XmlReader"/></param>
            <param name="ignoreCase">The flag indicating whether the name should be looked up in a case sensitive manner</param>
            <returns>The sequence containing all the elements <see cref="T:System.Xml.Linq.XElement"/> matching the <paramref name="name"/></returns>
        </member>
        <member name="T:Easy.Common.Extensions.StringExtensions">
            <summary>
            Extensions for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.StringExtensions.RegexCharacters">
            <summary>
             Contains characters that may be used as regular expression arguments after <c>\</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            A nicer way of calling <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the format parameter is null or an empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            A nice way of calling the inverse of <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the format parameter is not null or an empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsNullOrEmptyOrWhiteSpace(System.String)">
            <summary>
            A nice way of checking if a string is null, empty or whitespace 
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the format parameter is null or an empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsNotNullOrEmptyOrWhiteSpace(System.String)">
            <summary>
            A nice way of checking the inverse of (if a string is null, empty or whitespace) 
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the format parameter is not null or an empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.TryParseAsBool(System.String,System.Boolean@)">
            <summary>
            Parses a string as Boolean, valid inputs are: <c>true|false|yes|no|1|0</c>.
            <remarks>Input is parsed as Case-Insensitive.</remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>Formats arguments into string based on the provided <paramref name="format"/>.</summary>
            <param name="format">The <paramref name="format"/> as string. </param>
            <param name="args">The arguments. </param>
            <returns>The formatted string. </returns>
            <exception cref="T:System.ArgumentException"> Thrown when <paramref name="format"/> is null or empty or whitespace.</exception>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>Formats arguments into string based on the provided <paramref name="format"/>.</summary>
            <param name="format">The <paramref name="format"/> as string. </param>
            <param name="provider">The format provider. </param>
            <param name="args">The arguments. </param>
            <returns>The formatted string. </returns>
            <exception cref="T:System.ArgumentException"> Thrown when <paramref name="format"/> is null or empty or whitespace.</exception>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.NullIfEmpty(System.String)">
            <summary>
            Allows for using strings in <see langword="null"/> coalescing operations.
            </summary>
            <param name="value">The string value to check.</param>
            <returns>Null if <paramref name="value"/> is empty or the original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.TryExtractValueFromTag(System.String,System.String,System.String@)">
            <summary>
            Tries to extract the value between the tag <paramref name="tagName"/> from the <paramref name="input"/>.
            <remarks>This method is case insensitive.</remarks>
            </summary>
            <param name="input">The input string.</param>
            <param name="tagName">The tag whose value will be returned e.g <c>span, img</c>.</param>
            <param name="value">The extracted value.</param>
            <returns><c>True</c> if successful otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.SplitAndTrim(System.String,System.Char[])">
            <summary>
            Returns a string array containing the trimmed substrings in this <paramref name="value"/>
            that are delimited by the provided <paramref name="separators"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if the <paramref name="input"/> contains the <paramref name="stringToCheckFor"/> based on the provided <paramref name="comparison"/> rules.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.EqualsAny(System.String,System.StringComparer,System.String,System.String)">
            <summary>
            Checks that given <paramref name="input"/> matches any of the potential matches.
            Inspired by: http://stackoverflow.com/a/20644611/23199
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.EqualsAny(System.String,System.StringComparer,System.String,System.String,System.String)">
            <summary>
            Checks that given <paramref name="input"/> matches any of the potential matches.
            Inspired by: http://stackoverflow.com/a/20644611/23199
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.EqualsAny(System.String,System.StringComparer,System.String[])">
            <summary>
            Checks that given <paramref name="input"/> is in a list of potential <paramref name="matches"/>.
            Inspired by: http://stackoverflow.com/a/20644611/23199
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsPalindrome(System.String)">
            <summary>
            Checks to see if the given input is a valid palindrome or not.
            </summary>
            <param name="input">The input string</param>
            <returns><c>True</c> if palindrome otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the <paramref name="input"/> to the maximum length of <paramref name="maxLength"/> and
            replaces the truncated part with <paramref name="suffix"/>
            </summary>
            <param name="input">The input string</param>
            <param name="maxLength">Total length of characters to maintain before truncation.</param>
            <param name="suffix">The suffix to add to the end of the truncated <paramref name="input"/></param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.RemoveNewLines(System.String)">
            <summary>
            Removes different types of new lines from a given string.
            </summary>
            <param name="input">input string.</param>
            <returns>The given input minus any new line characters.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.SeparatePascalCase(System.String)">
            <summary>
            Separates a PascalCase string.
            </summary>
            <example> "ThisIsPascalCase".SeparatePascalCase(); // returns "This Is Pascal Case" </example>
            <param name="value">The format to split</param>
            <returns>The original string separated on each uppercase character.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts string to Pascal Case
            <example>This Is A Pascal Case String.</example>
            </summary>
            <param name="input">The given input.</param>
            <returns>The given <paramref name="input"/> converted to Pascal Case.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsEqualTo(System.String,System.String)">
            <summary>
            Compares <paramref name="input"/> against <paramref name="target"/>, the comparison is case-sensitive.
            </summary>
            <param name="input">The input string</param>
            <param name="target">The target string</param>
            <returns><c>True</c> if equal otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.Print(System.String,System.Object[])">
            <summary>
            Handy method to print arguments to <c>System.Console</c>.
            </summary>
            <param name="input">The input string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.GenerateSlug(System.String,System.Nullable{System.UInt32})">
            <summary>
            Generates a slug.
            <remarks>
            Credit goes to <see href="http://stackoverflow.com/questions/2920744/url-slugify-alrogithm-in-cs"/>.
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes the diacritics from the given <paramref name="input"/> 
            </summary>
            <remarks>
            Credit goes to <see href="http://stackoverflow.com/a/249126"/>.
            </remarks>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.ToPersianNumber(System.String)">
            <summary>
            A method to convert English digits to Persian numbers.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.GetElements(System.String,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets a sequence containing every element with the name equal to <paramref name="name"/>.
            </summary>
            <param name="xmlInput">The input containing XML</param>
            <param name="name">The name of the elements to return</param>
            <param name="ignoreCase">The flag indicating whether the name should be looked up in a case sensitive manner</param>
            <returns>The sequence containing all the elements <see cref="T:System.Xml.Linq.XElement"/> matching the <paramref name="name"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.GetElements(System.String,System.Xml.Linq.XName,System.Xml.XmlReaderSettings,System.Boolean)">
            <summary>
            Gets a sequence containing every element with the name equal to <paramref name="name"/>.
            </summary>
            <param name="xmlInput">The input containing XML</param>
            <param name="name">The name of the elements to return</param>
            <param name="settings">The settings used by the <see cref="T:System.Xml.XmlReader"/></param>
            <param name="ignoreCase">The flag indicating whether the name should be looked up in a case sensitive manner</param>
            <returns>The sequence containing all the elements <see cref="T:System.Xml.Linq.XElement"/> matching the <paramref name="name"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.Compress(System.String)">
            <summary>
            Compresses the given <paramref name="input"/> to <c>Base64</c> string.
            </summary>
            <param name="input">The string to be compressed</param>
            <returns>The compressed string in <c>Base64</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.Decompress(System.String)">
            <summary>
            Decompresses a <c>Base64</c> compressed string.
            </summary>
            <param name="compressedInput">The string compressed in <c>Base64</c></param>
            <returns>The uncompressed string</returns>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsValidFileName(System.String)">
            <summary>
            Ensures the given <paramref name="input"/> can be used as a file name.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.IsValidPathName(System.String)">
            <summary>
            Ensures the given <paramref name="input"/> can be used as a path.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.ToGuid(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Guid"/> from a <c>Base64</c> encoded <paramref name="input"/>.
            <example>
            DRfscsSQbUu8bXRqAvcWQA== or DRfscsSQbUu8bXRqAvcWQA depending on <paramref name="trimmed"/>.
            </example>
            <remarks>
            See: <see href="https://blog.codinghorror.com/equipping-our-ascii-armor/"/>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.ToCaseIncensitiveRegexArgument(System.String)">
            <summary>
            Converts <c>API</c> to <c>[aA][pP][iI]</c>.
            <remarks>
            This should be used as much faster alternative to adding <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> 
            or using the <c>(?i)</c> for example <c>(?i)API(?-i)</c>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.StringExtensions.GetStartAndEndIndexes(System.String,System.String,System.String)">
            <summary>
            Returns the all the start and end indexes of the occurrences of the 
            given <paramref name="startTag"/> and <paramref name="endTag"/> 
            in the given <paramref name="input"/>.
            </summary>
            <param name="input">The input to search.</param>
            <param name="startTag">The starting tag e.g. <c>&lt;div></c>.</param>
            <param name="endTag">The ending tag e.g. <c>&lt;/div></c>.</param>
            <returns>
            A sequence <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where the key is 
            the starting position and value is the end position.
            </returns>
        </member>
        <member name="T:Easy.Common.Extensions.TaskExtensions">
            <summary>
            A set of helper methods as extensions on <see cref="N:System.Threading.Tasks"/>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.ForEach``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Executes the given action on each of the tasks in turn, in the order of
            the sequence. The action is passed the result of each task.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.WhenAllOrFail``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that is deemed to have completed when
            all the <paramref name="tasks"/> have completed. Completed could mean
            <c>Faulted</c>, <c>Canceled</c> or <c>RanToCompletion</c>.
            </summary>
            <remarks>
            <c>Task.WhenAll</c> method keeps you unaware of the outcome of all the tasks 
            until the final one has completed. With this method you can stop waiting if 
            any of the supplied <paramref name="tasks"/> fails or cancels.
            </remarks>
            <typeparam name="T">Type of the result returned by the <paramref name="tasks"/></typeparam>
            <param name="tasks">The tasks to wait on.</param>
            <returns>A task returning all the results intended to be returned by <paramref name="tasks"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>
            Suppresses default exception handling of a Task that would otherwise re-raise 
            the exception on the finalizer thread.
            </summary>
            <param name="task">The Task to be monitored</param>
            <returns>The original Task</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.IgnoreExceptions``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Suppresses default exception handling of a Task that would otherwise re-raise 
            the exception on the finalizer thread.
            </summary>
            <param name="task">The Task to be monitored</param>
            <returns>The original Task</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.HandleExceptions(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            Handles all the exceptions thrown by the <paramref name="task"/>.
            </summary>
            <param name="task">The task which might throw exceptions</param>
            <param name="exceptionsHandler">The handler to which every exception is passed</param>
            <returns>The continuation task added to the <paramref name="task"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.HandleExceptions(System.Threading.Tasks.Task,System.Func{System.Exception,System.Boolean},System.Action{System.Exception})">
            <summary>
            Handles expected exception(s) thrown by the <paramref name="task"/> which are specified by <paramref name="exceptionPredicate"/>.
            </summary>
            <param name="task">The task which might throw exceptions.</param>
            <param name="exceptionPredicate">The predicate specifying which exception(s) to handle</param>
            <param name="exceptionHandler">The handler to which every exception is passed</param>
            <returns>The continuation task added to the <paramref name="task"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TaskExtensions.HandleException``1(System.Threading.Tasks.Task,System.Action{``0})">
            <summary>
            Handles an expected exception thrown by the <paramref name="task"/>.
            </summary>
            <typeparam name="T">Type of exception to handle</typeparam>
            <param name="task">The task which might throw exceptions</param>
            <param name="exceptionHandler">The handler to which every exception is passed</param>
            <returns>The continuation task added to the <paramref name="task"/></returns>
        </member>
        <member name="T:Easy.Common.Extensions.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.TryGetInstanceProperty(System.Type,System.String,System.Reflection.PropertyInfo@,System.Boolean)">
            <summary>
            Returns the <c>instance</c> property of the given <paramref name="type"/> regardless of it's access modifier.
            <remarks>This method can be used to return both a <c>public</c> or <c>non-public</c> property.</remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.GetInstanceProperties(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns all <c>instance</c> properties of the given <paramref name="type"/>.
            <remarks>This method can be used to return both a <c>public</c> or <c>non-public</c> property.</remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.GetInstanceProperties(System.Reflection.TypeInfo,System.Boolean,System.Boolean)">
            <summary>
            Returns all <c>instance</c> properties of the given <paramref name="typeInfo"/>.
            <remarks>This method can be used to return both a <c>public</c> or <c>non-public</c> property.</remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.GetPropertiesWithAttribute``1(System.Type,System.Boolean)">
            <summary>
            Returns the properties marked with an attribute of type <typeparamref name="T"/>.
            <remarks>It avoids materializing any attribute instances. <see href="http://stackoverflow.com/a/2282254/1226568"/></remarks>
            </summary>
            <typeparam name="T">Type of <c>Attribute</c> which has decorated the properties.</typeparam>
            <param name="type">Type of <c>Object</c> which has properties decorated with <typeparamref name="T"/>.</param>
            <param name="inherit">If <c>true</c> it also searches the ancestors for the <typeparamref name="T"/>.</param>
            <returns>A sequence containing properties decorated with <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.GetAttributeToPropertyMapping``1(System.Type,System.Boolean)">
            <summary>
            Returns a mapping of <typeparamref name="T"/> attribute to <see cref="T:System.Reflection.PropertyInfo"/> for a given <paramref name="type"/>.
            </summary>
            <typeparam name="T">Type of attribute which will be used as the key</typeparam>
            <param name="type">Type whose properties will be mapped to the <typeparamref name="T"/> attributes</param>
            <param name="inherit">If <c>true</c> it also searches the ancestors for the <typeparamref name="T"/>.</param>
            <returns>A mapping between the attributes defined on the properties and the property infos</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.TryGetAttributes``1(System.Type,``0[]@,System.Boolean)">
            <summary>
            Tries to get attributes of type <typeparamref name="T"/> defined on the given <paramref name="type"/>.
            </summary>
            <typeparam name="T">The type of the attribute to get</typeparam>
            <param name="type">The type on which the attribute has been defined</param>
            <param name="attributes">All of the attributes found on the given type</param>
            <param name="inherit">If <c>true</c> it also searches the ancestors for the <typeparamref name="T"/>.</param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.TryGetGenericArguments(System.Type,System.Type[]@)">
            <summary>
            Tries to get the generic type arguments for the given <paramref name="type"/>.
            <example>For a type of <see cref="T:System.Collections.Generic.List`1"/> the generic type is <see cref="T:System.Int32"/>.</example>
            </summary>
            <param name="type">The type for which generic type should be retrieved</param>
            <param name="genericArguments">The result</param>
            <returns><see langword="true"/> if generic types can be retrieved otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.IsSequence(System.Type,Easy.Common.Extensions.SequenceType@)">
            <summary>
            Determines if the given <paramref name="type"/> is a sequence of elements.
            </summary>
            <param name="type">The type to inspect</param>
            <param name="sequenceType">The determined type of the sequence</param>
            <returns><c>True</c> if <paramref name="type"/> is a sequence otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.Implements``1(System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> implements <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> has a default constructor.
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>True</c> if <paramref name="type"/> has a default constructor, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> is of simple type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>True</c> if it is simple type otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.IsArrayOf``1(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> an array of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The Type of the elements in the array.</typeparam>
            <param name="type">The type of object.</param>
            <returns><c>True</c> or <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.IsGenericList(System.Type)">
            <summary>
            Determines whether the given <paramref name="type"/> is a generic list
            </summary>
            <param name="type">The type to evaluate</param>
            <returns><c>True</c> if is generic otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Determines if the given <paramref name="type"/> is numeric.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the <see cref="T:System.TypeCode"/> for the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.SequenceType">
            <summary>
            Enum representing the possible types of a sequence.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Invalid">
            <summary>
            Represents an invalid type.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.String">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.String"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Array">
            <summary>
            Represents an Array.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.BitArray">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.BitArray"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.ArrayList">
            <summary>
            Represents an <see cref="F:Easy.Common.Extensions.SequenceType.ArrayList"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Queue">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.Queue"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Stack">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.Stack"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Hashtable">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.Hashtable"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.SortedList">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.SortedList"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Dictionary">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.Dictionary"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.ListDictionary">
            <summary>
            Represents a <see cref="F:Easy.Common.Extensions.SequenceType.ListDictionary"/>. This type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.IList">
            <summary>
            Represents an <see cref="F:Easy.Common.Extensions.SequenceType.IList"/>. This interface type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.ICollection">
            <summary>
            Represents an <see cref="F:Easy.Common.Extensions.SequenceType.ICollection"/>. This interface type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.IDictionary">
            <summary>
            Represents an <see cref="F:Easy.Common.Extensions.SequenceType.IDictionary"/>. This interface type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.IEnumerable">
            <summary>
            Represents an <see cref="F:Easy.Common.Extensions.SequenceType.IEnumerable"/>. This interface type is non generic.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.Custom">
            <summary>
            Represents a custom implementation of <see cref="F:Easy.Common.Extensions.SequenceType.IEnumerable"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericList">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericLinkedList">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericCollection">
            <summary>
            Represents a <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericQueue">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericStack">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericHashSet">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericSortedList">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericDictionary">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericSortedDictionary">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericBlockingCollection">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericConcurrentDictionary">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericConcurrentBag">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericIList">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericICollection">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericIEnumerable">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericIDictionary">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericICollectionKeyValue">
            <summary>
            Represents an <see> <cref>ICollection{KeyValuePair{TKey, TValue}}</cref></see>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericIEnumerableKeyValue">
            <summary>
            Represents an <see> <cref>IEnumerable{KeyValuePair{TKey, TValue}}</cref></see>.
            </summary>
        </member>
        <member name="F:Easy.Common.Extensions.SequenceType.GenericCustom">
            <summary>
            Represents a custom implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.UriExtensions">
            <summary>
            Provides a set of helper methods for working with <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.UriExtensions.ParseQueryString(System.Uri)">
            <summary>
            Extracts Parameters and Values from the Query String
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.UriExtensions.AddParametersToQueryString(System.Uri,System.String,System.String)">
            <summary>
            Adds or appends parameters and values to the query-string.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.UriExtensions.AddParametersToQueryString(System.Uri,System.String,System.Int32)">
            <summary>
            Adds or appends parameters and values to the query-string.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.UriExtensions.AddParametersToQueryString(System.Uri,System.String,System.Int64)">
            <summary>
            Adds or appends parameters and values to the query-string.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.UriExtensions.WithModifiedQuerystring(System.Uri,System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Applies the specified <paramref name="modification"/> to the <paramref name="uri"/> query-string.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.XmlExtensions">
            <summary>
            Extension methods for classes in the <see cref="N:System.Xml"/> namespace.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.XmlExtensions.SetDefaultXmlNamespace(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
            <summary>
            Sets the default XML namespace of every element in the given XML element
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.XmlExtensions.GetEelements(System.Xml.XmlReader,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets a sequence containing every element with the name equal to <paramref name="name"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to read the XML</param>
            <param name="name">The name of the elements to return</param>
            <param name="ignoreCase">The flag indicating whether the name should be looked up in a case sensitive manner</param>
            <returns>The sequence containing all the elements <see cref="T:System.Xml.Linq.XElement"/> matching the <paramref name="name"/></returns>
        </member>
        <member name="M:Easy.Common.Extensions.XmlExtensions.ToDynamic(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Converts the content of the given <paramref name="reader"/> to <see cref="T:Easy.Common.DynamicDictionary"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.Extensions.GuidExtensions">
            <summary>
            Provides a set of helper methods for working with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GuidExtensions.AsShortCodeBase64(System.Guid,System.Boolean)">
            <summary>
            Returns a <c>Base64</c> encoded <see cref="T:System.Guid"/>.
            <example>
            DRfscsSQbUu8bXRqAvcWQA== or DRfscsSQbUu8bXRqAvcWQA depending on <paramref name="trimEnd"/>.
            </example>
            <remarks>
            The result of this method is not <c>URL</c> safe.
            See: <see href="https://blog.codinghorror.com/equipping-our-ascii-armor/"/>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GuidExtensions.AsShortCode(System.Guid)">
            <summary>
            Generates a maximum of 16 character, <see cref="T:System.Guid"/> based string with very little chance of collision. 
            <example>3c4ebc5f5f2c4edc</example>.
            <remarks>
            The result of this method is <c>URL</c> safe.
            Slower than <see cref="M:Easy.Common.Extensions.GuidExtensions.AsShortCodeBase64(System.Guid,System.Boolean)"/>. 
            See: <see href="http://madskristensen.net/post/generate-unique-strings-and-numbers-in-c"/>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.Extensions.GuidExtensions.AsNumber(System.Guid)">
            <summary>
            Generates a 19 character, <see cref="T:System.Guid"/> based number. 
            <example>4801539909457287012</example>.
            <remarks>
            Faster than <see cref="M:Easy.Common.Extensions.GuidExtensions.AsShortCodeBase64(System.Guid,System.Boolean)"/>. 
            See: <see href="http://madskristensen.net/post/generate-unique-strings-and-numbers-in-c"/>
            </remarks>
            </summary>
        </member>
        <member name="T:Easy.Common.Equatable`1">
            <summary>
            Provides a helper class for implementing <see cref="T:System.IEquatable`1"/>.
            </summary>
            <typeparam name="T">The type of object to provide equability</typeparam>
        </member>
        <member name="M:Easy.Common.Equatable`1.GetHashCode">
            <summary>
            Provides the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.Equatable`1.Equals(`0)">
            <summary>
            Determines whether this object is equal <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Equatable`1.Equals(System.Object)">
            <summary>
            Determines whether this object is equal <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Equatable`1.op_Equality(Easy.Common.Equatable{`0},Easy.Common.Equatable{`0})">
            <summary>
            Determines whether the given <paramref name="left"/> is equal <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.Equatable`1.op_Inequality(Easy.Common.Equatable{`0},Easy.Common.Equatable{`0})">
            <summary>
            Determines whether the given <paramref name="left"/> is equal <paramref name="right"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.GuidHelper">
            <summary>
            Provides a set of methods to help work with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.GuidHelper.CreateSequentialUUID">
            <summary>
            Creates a sequential UUID.
            <remarks>
            This is used by <c>MSSQL</c> and it is much faster than using <see cref="M:System.Guid.NewGuid"/>.
            <see Href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa379322%28v=vs.85%29.aspx"/>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.GuidHelper.CreateComb">
            <summary>
            Generates a sequential Guid.
            </summary>
            <remarks>
            Taken from the NHibernate project, original contribution of Donald Mull.
            See: https://github.com/nhibernate/nhibernate-core/blob/5e71e83ac45439239b9028e6e87d1a8466aba551/src/NHibernate/Id/GuidCombGenerator.cs
            </remarks>
        </member>
        <member name="T:Easy.Common.HashHelper">
            <summary>
            Helper class for generating hash code
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``1(``0)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``2(``0,``1)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``3(``0,``1,``2)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``4(``0,``1,``2,``3)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``5(``0,``1,``2,``3,``4)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Gets the hash using the given parameters.
            </summary>
        </member>
        <member name="M:Easy.Common.HashHelper.GetHashCode``1(``0[])">
            <summary>
            Generates a hash code using the given <paramref name="properties"/> 
            (credit Jon Skeet @ http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode)
            </summary>
        </member>
        <member name="T:Easy.Common.Interfaces.IClock">
            <summary>
            Provides the contract for representing a clock.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IClock.IsPrecise">
            <summary>
            Gets the flag indicating whether the instance of <see cref="T:Easy.Common.Interfaces.IClock"/> provides high resolution time.
            <remarks>
            <para>
            This only returns <c>True</c> on <c>Windows 8</c>/<c>Windows Server 2012</c> and higher.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IClock.UtcNow">
            <summary>
            Gets the date and time in <c>UTC</c>.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IClock.Now">
            <summary>
            Gets the local date time.
            </summary>
        </member>
        <member name="T:Easy.Common.Interfaces.IConfigReader">
            <summary>
            A contact defining how configuration values should be returned as static objects.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IConfigReader.ConfigFile">
            <summary>
            Gets the file storing the config entries.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IConfigReader.Settings">
            <summary>
            Gets all of the settings retrieved from the configuration.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="values"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="values">The set of values associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.String@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Int16@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Int32@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Int64@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.UInt16@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.UInt32@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.UInt64@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Single@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Double@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Decimal@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Boolean@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            <remarks>
            The following values can be parsed (case-insensitive): 
                <c>True/False</c>,
                <c>Yes/No</c>,
                <c>0/1</c>
            </remarks>
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryReadStringAsCsv(System.String,System.String,System.String[]@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="separator">The <see cref="T:System.String"/> separating the values</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetTicks(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetMilliseconds(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetSeconds(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetMinutes(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetHours(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetDays(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryGetWeeks(System.String,System.TimeSpan@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.String,System.DateTime@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="formatSpecifier">The format used to parse the value as <paramref name="value"/></param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.IO.FileInfo@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.IO.DirectoryInfo@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IConfigReader.TryRead(System.String,System.Uri@)">
            <summary>
            Attempts to read a config value specified as <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to retrieve from the configuration</param>
            <param name="value">The value associated with the <paramref name="key"/></param>
            <returns><c>True</c> if successful otherwise <c>False</c></returns>
        </member>
        <member name="T:Easy.Common.Interfaces.IObjectPool">
            <summary>
            Specifies the contract which an object pool should implement.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IObjectPool.TotalRegistrations">
            <summary>
            Returns the total number of registered types in the pool.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IObjectPool.Register``1(System.Func{``0},System.UInt32)">
            <summary>
            Registers the creation of the <typeparamref name="T"/> with the pool.
            </summary>
            <param name="factory">The factory used to create an instance of <typeparamref name="T"/></param>
            <param name="maximumCount">The maximum number of objects to store in the pool</param>
        </member>
        <member name="M:Easy.Common.Interfaces.IObjectPool.Get``1">
            <summary>
            Returns an instance of the <typeparamref name="T"/> from the pool.
            </summary>
            <typeparam name="T">Type of pooled object</typeparam>
            <returns>An instance of the <typeparamref name="T"/></returns>
        </member>
        <member name="M:Easy.Common.Interfaces.IObjectPool.Put``1(``0)">
            <summary>
            Puts an instance of the <typeparamref name="T"/> back in the pool.
            </summary>
            <typeparam name="T">Type of pooled object</typeparam>
            <param name="item">An instance of the <typeparamref name="T"/></param>
        </member>
        <member name="M:Easy.Common.Interfaces.IObjectPool.GetCountOfObjectsInThePool``1">
            <summary>
            Returns the total number of instances of the <typeparamref name="T"/>
            currently in the pool.
            </summary>
        </member>
        <member name="T:Easy.Common.Interfaces.IPoolableObject">
            <summary>
            Determines the contract for a poolable object.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IPoolableObject.SetPoolManager(Easy.Common.Interfaces.IObjectPool)">
            <summary>
            Sets the <see cref="T:Easy.Common.Interfaces.IObjectPool"/> for the <see cref="T:Easy.Common.Interfaces.IPoolableObject"/>.
            </summary>
            <param name="pool">The object pool which stores the <see cref="T:Easy.Common.Interfaces.IPoolableObject"/>.</param>
        </member>
        <member name="T:Easy.Common.Interfaces.ITimerClock">
            <summary>
            An interface representing a clock which ticks at a given interval.
            </summary>
        </member>
        <member name="E:Easy.Common.Interfaces.ITimerClock.Tick">
            <summary>
            Gets the event raised on every tick of the clock.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.ITimerClock.Clock">
            <summary>
            Gets the clock used by this instance of <see cref="T:Easy.Common.Interfaces.ITimerClock"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.ITimerClock.TickInterval">
            <summary>
            Gets the frequency at which the <see cref="E:Easy.Common.Interfaces.ITimerClock.Tick"/> is raised.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.ITimerClock.Enabled">
            <summary>
            Gets the flag indicating whether the clock is enabled or not.
            </summary>
        </member>
        <member name="T:Easy.Common.Interfaces.IRestClient">
            <summary>
            Specifies the contract to be implemented by a rest client.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IRestClient.DefaultRequestHeaders">
            <summary>
            Gets the headers which should be sent with each request.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IRestClient.Timeout">
            <summary>
            Gets the time to wait before the request times out.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IRestClient.MaxResponseContentBufferSize">
            <summary>
            Gets the maximum number of bytes to buffer when reading the response content.
            </summary>
        </member>
        <member name="P:Easy.Common.Interfaces.IRestClient.Endpoints">
            <summary>
            Gets all of the endpoints which this instance has sent a request to.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.SendAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.ClearEndpoints">
            <summary>
            Clears all of the endpoints which this instance has sent a request to.
            </summary>
        </member>
        <member name="M:Easy.Common.Interfaces.IRestClient.CancelPendingRequests">
            <summary>
            Cancels all pending requests on this instance.
            </summary>
        </member>
        <member name="T:Easy.Common.JSONContent">
            <summary>
            Provides HTTP content based on a <c>JSON</c> string.
            </summary>
        </member>
        <member name="M:Easy.Common.JSONContent.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.JSONContent"/> with the default encoding of <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.JSONContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.JSONContent"/> with the given <paramref name="encoding"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.XMLContent">
            <summary>
            Provides HTTP content based on an <c>XML</c> string.
            </summary>
        </member>
        <member name="M:Easy.Common.XMLContent.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.XMLContent"/> with the default encoding of <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.XMLContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.XMLContent"/> with the given <paramref name="encoding"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.KeyedCollectionEx`2">
            <summary>
            A dictionary of <typeparamref name="TItem"/> whose <typeparamref name="TKey"/> can be defined as a delegate at the time of initialization. 
            <remarks>
            This class is not thread-safe.
            <para><code>var myDic = new KeyedCollectionEx&lt;int, Person>(p => p.Name);</code></para>
            </remarks> 
            </summary>
            <typeparam name="TKey">Key to be used as the HashKey</typeparam>
            <typeparam name="TItem">Item to be stored as Value</typeparam>
        </member>
        <member name="M:Easy.Common.KeyedCollectionEx`2.#ctor(System.Func{`1,`0})">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.KeyedCollectionEx`2"/>.
            </summary>
            <param name="keySelector">The selector used to select the key for the collection</param>
        </member>
        <member name="M:Easy.Common.KeyedCollectionEx`2.TryGet(`0,`1@)">
            <summary>
            Attempts to return the value for the given <paramref name="key"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.KeyedCollectionEx`2.GetKeyForItem(`1)">
            <summary>
            Gets the key for the given <paramref name="item"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.LockHelper">
            <summary>
            This is a helper class providing handy methods around locking
            </summary>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate``1(``0@,System.Func{``0,``0})">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <typeparam name="T">Type of variable to update</typeparam>
            <param name="field">The variable to be updated</param>
            <param name="updater">
            The function providing the updated value.
            <remarks>The <paramref name="updater"/> may run more than once</remarks>
            </param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate``1(``0@,``0)">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <typeparam name="T">Type of variable to update</typeparam>
            <param name="field">The variable to be updated</param>
            <param name="newValue">The new value to replace the value at <paramref name="field"/></param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="updater">
            The function providing the updated value.
            <remarks>The <paramref name="updater"/> may run more than once</remarks>
            </param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Int32@,System.Int32)">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="newValue">The new value to replace the value at <paramref name="field"/></param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Int64@,System.Func{System.Int64,System.Int64})">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="updater">
            The function providing the updated value.
            <remarks>The <paramref name="updater"/> may run more than once</remarks>
            </param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Int64@,System.Int64)">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="newValue">The new value to replace the value at <paramref name="field"/></param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Single@,System.Func{System.Single,System.Single})">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="updater">
            The function providing the updated value.
            <remarks>The <paramref name="updater"/> may run more than once</remarks>
            </param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Single@,System.Single)">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="newValue">The new value to replace the value at <paramref name="field"/></param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Double@,System.Func{System.Double,System.Double})">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="updater">
            The function providing the updated value.
            <remarks>The <paramref name="updater"/> may run more than once</remarks>
            </param>
        </member>
        <member name="M:Easy.Common.LockHelper.LockFreeUpdate(System.Double@,System.Double)">
            <summary>
            Provides lock free and atomic update of <paramref name="field"/>
            </summary>
            <param name="field">The variable to be updated</param>
            <param name="newValue">The new value to replace the value at <paramref name="field"/></param>
        </member>
        <member name="M:Easy.Common.LockHelper.Lock(System.Object,System.TimeSpan)">
            <summary>
            Provides a lock with a timeout.
            </summary>
            <example>
            var locker = new object();
            using(locker.Lock(TimeSpan.FromSeconds(1)))
            {
                sharedVariable++;
            }
            </example>
            <param name="obj">Object on which lock is taken.</param>
            <param name="timeout">Timeout for the lock.</param>
            <returns>A locker on which lock will be taken.</returns>
        </member>
        <member name="T:Easy.Common.LockHelper.Locker">
            <summary>
            As part of the Lock extension method on <c>object</c>s 
            it provides a timeout mechanism for acquiring locks.
            </summary>
        </member>
        <member name="M:Easy.Common.LockHelper.Locker.#ctor(System.Object)">
            <summary>
            Returns an instance of <see cref="T:Easy.Common.LockHelper.Locker"/>.
            </summary>
            <param name="obj">The <c>object</c> on which lock is taken.</param>
        </member>
        <member name="M:Easy.Common.LockHelper.Locker.Dispose">
            <summary>
            Releases any locks taken by this instance.
            </summary>
        </member>
        <member name="T:Easy.Common.MimeMappings">
            <summary>
            Maps file extensions to MIME/Media types
            </summary>
        </member>
        <member name="P:Easy.Common.MimeMappings.Mappings">
            <summary>
            Returns a copy of the mappings.
            <remarks>The mappings use the <see cref="P:System.StringComparer.OrdinalIgnoreCase"/></remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.MimeMappings.TryGetMimeMappingByFileName(System.String,System.String@)">
            <summary>
            Returns the MIME/Media mapped to the <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file for which MIME should be returned</param>
            <param name="mime">The out value for the MIME</param>
            <returns><c>True</c> if mapping exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.MimeMappings.TryGetMimeMappingByExtension(System.String,System.String@)">
            <summary>
            Returns the MIME/Media mapped to the <paramref name="extension"/>
            </summary>
            <param name="extension">The file-extension for which MIME should be returned</param>
            <param name="mime">The out value for the MIME</param>
            <returns><c>True</c> if mapping exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Easy.Common.MimeMappings.AddMapping(System.String,System.String)">
            <summary>
            Adds a mapping to the <see cref="T:Easy.Common.MimeMappings"/>.
            </summary>
            <param name="extension">The file-extension of the MIME</param>
            <param name="mimeType">The type of the MIME</param>
        </member>
        <member name="T:Easy.Common.NativeMethods">
            <summary>
            Contains all the native methods used by this library.
            </summary>
        </member>
        <member name="T:Easy.Common.NetworkHelper">
            <summary>
            Provides a set of methods to help work with network related activities.
            </summary>
        </member>
        <member name="M:Easy.Common.NetworkHelper.GetFQDN">
            <summary>
            Returns the LocalHost Fully Qualified Domain Name
            <see href="http://stackoverflow.com/questions/804700/how-to-find-fqdn-of-local-machine-in-c-net"/>
            </summary>
            <returns>The localhost Fully Qualified Domain Name</returns>
        </member>
        <member name="M:Easy.Common.NetworkHelper.GetLocalIpAddress">
            <summary>
            Gets the local IP address for the machine or VM running the code.
            <remarks>
            <see href="http://stackoverflow.com/a/27376368"/>
            </remarks>
            </summary>
            <returns>The local IP address</returns>
        </member>
        <member name="T:Easy.Common.PathHelper">
            <summary>
            Provides helper methods for working with paths.
            </summary>
        </member>
        <member name="M:Easy.Common.PathHelper.MakeFileNameSafeForUrls(System.String)">
            <summary>
            Makes the given <paramref name="fileName"/> safe for use within a URL.
            </summary>
        </member>
        <member name="M:Easy.Common.PathHelper.IsValidFilename(System.String)">
            <summary>
            Checks if a given <paramref name="fileName"/> is valid.
            </summary>
        </member>
        <member name="T:Easy.Common.PredicateBuilder">
            <summary>
            Helps with the creation of predicates.
            <see href="http://www.albahari.com/nutshell/predicatebuilder.aspx"/>
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the given lambda expression.
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.True``1">
            <summary>
            Creates a predicate that evaluates to <c>True</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.False``1">
            <summary>
            Creates a predicate that evaluates to <c>False</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical <c>OR</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical <c>AND</c>.
            </summary>
        </member>
        <member name="M:Easy.Common.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates a given predicate.
            </summary>
        </member>
        <member name="T:Easy.Common.ProcessHelper">
            <summary>
            Provides a set of methods to help work with a <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.ProcessHelper.RunProcessAsync(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a Process Asynchronously;
            http://www.levibotelho.com/development/async-processes-with-taskcompletionsource/
            </summary>
            <param name="processInfo">The information for the process to run</param>
            <returns>A task representing the started process</returns>
        </member>
        <member name="M:Easy.Common.ProcessHelper.RunProcessAsync(System.String)">
            <summary>
            Starts a process represented by <paramref name="processPath"/> asynchronously
            </summary>
            <param name="processPath">The path to the process</param>
            <returns>A task representing the started process</returns>
        </member>
        <member name="T:Easy.Common.ProducerConsumerQueue`1">
            <summary>
            An implementation of the <c>Producer/Consumer</c> pattern using <c>TPL</c>.
            </summary>
            <typeparam name="T">Type of the item to produce/consume</typeparam>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.#ctor(System.Action{`0},System.UInt32)">
            <summary>
            Creates an unbounded instance of <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>.
            </summary>
            <param name="consumer">The action to be executed when consuming the queued items</param>
            <param name="maxConcurrencyLevel">Maximum number of consumers</param>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.#ctor(System.Action{`0},System.UInt32,System.UInt32)">
            <summary>
            Creates an instance of <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>.
            </summary>
            <param name="consumer">The action to be executed when consuming the queued items</param>
            <param name="maxConcurrencyLevel">Maximum number of consumers</param>
            <param name="boundedCapacity">
            The bounded capacity of the queue. Any more items added will block the publisher 
            until there is more space available. For an unbounded queue, enter a negative number.
            </param>
        </member>
        <member name="P:Easy.Common.ProducerConsumerQueue`1.WorkerCount">
            <summary>
            Gets the number of consumer threads.
            </summary>
        </member>
        <member name="P:Easy.Common.ProducerConsumerQueue`1.Capacity">
            <summary>
            Gets the bounded capacity of the underlying queue. -1 for unbounded.
            </summary>
        </member>
        <member name="P:Easy.Common.ProducerConsumerQueue`1.PendingCount">
            <summary>
            Gets the count of items that are pending consumption.
            </summary>
        </member>
        <member name="P:Easy.Common.ProducerConsumerQueue`1.PendingItems">
            <summary>
            Gets the pending items in the queue. 
            <remarks>
            Note, the items are valid as a snapshot at the time of invocation.
            </remarks>
            </summary>
        </member>
        <member name="P:Easy.Common.ProducerConsumerQueue`1.Completion">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.Task"/> which completes when all the consumers have finished their work.
            </summary>
        </member>
        <member name="E:Easy.Common.ProducerConsumerQueue`1.OnException">
            <summary>
            Thrown when an error occurs during the consumption or publication of items.
            </summary>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.Add(`0)">
            <summary>
            Adds the specified item to the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>. 
            This method blocks if the queue is full and until there is more room.
            </summary>
            <param name="item">The item to be added to the collection. The value can be a null reference.</param>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.Add(`0,System.Threading.CancellationToken)">
            <summary>
            Adds the specified item to the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>. 
            This method blocks if the queue is full and until there is more room.
            </summary>
            <param name="item">The item to be added to the collection. The value can be a null reference.</param>
            <param name="cancellationToken">The cancellation token to observe.</param>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.TryAdd(`0)">
            <summary>
            Tries to add the specified item to the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>.
            </summary>
            <param name="item">The item to be added.</param>
            <returns>
            <c>True</c> if <paramref name="item"/> could be added to the collection within the specified time, 
            otherwise <c>False</c>. If the item is a duplicate, and the underlying collection does 
            not accept duplicate items, then an <see cref="T:System.InvalidOperationException"/> is thrown wrapped 
            in a <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </returns>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.TryAdd(`0,System.TimeSpan)">
            <summary>
            Tries to add the specified item to the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/> within the specified time period.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="timeout">Represents the time to wait.</param>
            <returns>
            <c>True</c> if <paramref name="item"/> could be added to the collection within the specified time, 
            otherwise <c>False</c>. If the item is a duplicate, and the underlying collection does 
            not accept duplicate items, then an <see cref="T:System.InvalidOperationException"/> is thrown wrapped 
            in a <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </returns>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.TryAdd(`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to add the specified item to the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/> within the specified time period.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="timeout">Represents the time to wait.</param>
            <param name="cancellationToken">The cancellation token to observe.</param>
            <returns>
            <c>True</c> if <paramref name="item"/> could be added to the collection within the specified time, 
            otherwise <c>False</c>. If the item is a duplicate, and the underlying collection does 
            not accept duplicate items, then an <see cref="T:System.InvalidOperationException"/> is thrown wrapped 
            in a <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </returns>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.CompleteAdding">
            <summary>
            Marks the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/> instance as not accepting any new items.
            </summary>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueue`1.Dispose">
            <summary>
            Releases all the resources used by this instance.
            </summary>
        </member>
        <member name="T:Easy.Common.ProducerConsumerQueueException">
            <summary>
            The <see cref="T:System.Exception"/> thrown by the <see cref="T:Easy.Common.ProducerConsumerQueue`1"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueueException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueueException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </summary>
            <param name="message">The message for the <see cref="T:System.Exception"/></param>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueueException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </summary>
            <param name="message">The message for the <see cref="T:System.Exception"/></param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Easy.Common.ProducerConsumerQueueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.ProducerConsumerQueueException"/>.
            </summary>
            <param name="info">The serialization information</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="T:Easy.Common.RestClient">
            <summary>
            An abstraction over <see cref="T:System.Net.Http.HttpClient"/> to address the following issues:
            <para><see href="http://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/"/></para>
            <para><see href="http://byterot.blogspot.co.uk/2016/07/singleton-httpclient-dns.html"/></para>
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Net.Http.HttpMessageHandler,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.UInt64})">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.RestClient"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.RestClient.DefaultRequestHeaders">
            <summary>
            Gets the headers which should be sent with each request.
            </summary>
        </member>
        <member name="P:Easy.Common.RestClient.Timeout">
            <summary>
            Gets the time to wait before the request times out.
            </summary>
        </member>
        <member name="P:Easy.Common.RestClient.MaxResponseContentBufferSize">
            <summary>
            Gets the maximum number of bytes to buffer when reading the response content.
            </summary>
        </member>
        <member name="P:Easy.Common.RestClient.Endpoints">
            <summary>
            Gets all of the endpoints which this instance has sent a request to.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.SendAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.ClearEndpoints">
            <summary>
            Clears all of the endpoints which this instance has sent a request to.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.CancelPendingRequests">
            <summary>
            Cancels all pending requests on this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.RestClient.Dispose">
            <summary>
            Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="T:Easy.Common.StringBuilderCache">
            <summary>
            Provides a cached reusable instance of <see cref="T:System.Text.StringBuilder"/> per thread 
            it is an optimization that reduces the number of instances constructed and collected.
            <remarks>
            <para>A StringBuilder instance is cached in <c>Thread Local Storage</c> and so there is one per thread.</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.StringBuilderCache.Acquire">
            <summary>
            Acquires a cached instance of <see cref="T:System.Text.StringBuilder"/> if one exists otherwise a new instance.
            </summary>
            <returns>An instance of <see cref="T:System.Text.StringBuilder"/></returns>
        </member>
        <member name="M:Easy.Common.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
            Gets the string representation of the <paramref name="builder"/> and releases it to the cache.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/></param>
            <returns>The string representation of the <paramref name="builder"/></returns>
        </member>
        <member name="T:Easy.Common.SubArray`1">
            <summary>
            An object which represents a portion (segment) of an array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
        </member>
        <member name="P:Easy.Common.SubArray`1.Segment">
            <summary>
            The segment representing a portion of the array.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.SubArray`1"/>.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The zero based index of the first element in the range.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="P:Easy.Common.SubArray`1.Length">
            <summary>
            Gets the number of elements in the range.
            </summary>
        </member>
        <member name="P:Easy.Common.SubArray`1.Item(System.Int32)">
            <summary>
            Gets the element stored at the given zero based index.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.ToArray">
            <summary>
            Creates an array from this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> from this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> from this instance.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.Equals(Easy.Common.SubArray{`0})">
            <summary>
            Determines whether the specified <paramref name="other"/> structure is equal to the current instance.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.Equals(System.Object)">
            <summary>
            Determines whether the specified other structure is equal to the current instance.
            </summary>
        </member>
        <member name="M:Easy.Common.SubArray`1.op_Equality(Easy.Common.SubArray{`0},Easy.Common.SubArray{`0})">
            <summary>
            Provides the equality operator override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.SubArray`1.op_Inequality(Easy.Common.SubArray{`0},Easy.Common.SubArray{`0})">
            <summary>
            Provides the in-equality operator override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.SubArray`1.GetHashCode">
            <summary>
            Returns the hash code for the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy.Common.SubArray`1.ToString">
            <summary>
            Obtains the <see cref="T:System.String"/> representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy.Common.ThreadLocalDisposable`1">
            <summary>
            A class similar to <see cref="T:System.Threading.ThreadLocal`1"/> with the ability to dispose the <typeparamref name="T"/>.
            <para><see href="http://stackoverflow.com/a/7670762/1226568"/>.</para>
            </summary>
        </member>
        <member name="M:Easy.Common.ThreadLocalDisposable`1.#ctor(System.Func{`0})">
            <summary>
            Create an instance of the <see cref="T:Easy.Common.ThreadLocalDisposable`1"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.ThreadLocalDisposable`1.IsValueCreated">
            <summary>
            Gets whether the <c>Value</c> is initialized on the current thread.
            </summary>
        </member>
        <member name="P:Easy.Common.ThreadLocalDisposable`1.Value">
            <summary>
            Gets the <c>Value</c> of this instance for the current thread.
            </summary>
        </member>
        <member name="M:Easy.Common.ThreadLocalDisposable`1.ToString">
            <summary>
            Creates and returns the <see cref="T:System.String"/> representation of this instance for the current thread.
            </summary>
        </member>
        <member name="M:Easy.Common.ThreadLocalDisposable`1.Dispose">
            <summary>
            Releases all the resources used by this instance.
            </summary>
        </member>
        <member name="T:Easy.Common.TimerClock">
            <summary>
            A class representing a clock which ticks at a given interval.
            </summary>
        </member>
        <member name="P:Easy.Common.TimerClock.Clock">
            <summary>
            Gets the clock used by this instance of <see cref="T:Easy.Common.TimerClock"/>.
            </summary>
        </member>
        <member name="E:Easy.Common.TimerClock.Tick">
            <summary>
            The event is raised at every clock tick specified by the <see cref="P:Easy.Common.TimerClock.TickInterval"/>.
            </summary>
        </member>
        <member name="P:Easy.Common.TimerClock.TickInterval">
            <summary>
            Gets the interval at which to raise the <see cref="E:Easy.Common.TimerClock.Tick"/> event.
            </summary>
        </member>
        <member name="M:Easy.Common.TimerClock.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance of the <see cref="T:Easy.Common.TimerClock"/>.
            </summary>
            <param name="interval">The interval at which to raise the <see cref="E:Easy.Common.TimerClock.Tick"/> event</param>
        </member>
        <member name="P:Easy.Common.TimerClock.Enabled">
            <summary>
            Enables or disables the clock which controls whether 
            the <see cref="E:Easy.Common.TimerClock.Tick"/> should be raised.
            <remarks>
            <para>
            Note this does not <c>Pause</c> the clock but resets the timer every time it is set to <c>True</c>.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Easy.Common.TimerClock.Dispose">
            <summary>
            The dispose
            </summary>
        </member>
        <member name="M:Easy.Common.TimerClock.ToString">
            <summary>
            Converts the value of the <see cref="T:Easy.Common.TimerClock"/> to its equivalent <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of the <see cref="T:Easy.Common.TimerClock"/></returns>
        </member>
        <member name="T:Easy.Common.UnitConverter">
            <summary>
            A set of methods to convert between different units.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.Humanize(System.Double)">
            <summary>
            Returns a more human friendly textual representation of the given <paramref name="bytes"/>.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.BytesToMegaBytes(System.Double)">
            <summary>
            Converts Bytes to Megabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.BytesToGigaBytes(System.Double)">
            <summary>
            Converts Bytes to Gigabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.KiloBytesToMegaBytes(System.Double)">
            <summary>
            Converts Kilobytes to Megabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.MegaBytesToGigaBytes(System.Double)">
            <summary>
            Converts Megabytes to Gigabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.MegaBytesToTeraBytes(System.Double)">
            <summary>
            Converts Megabytes to Terabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.GigaBytesToMegaBytes(System.Double)">
            <summary>
            Converts Gigabytes to Megabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.GigaBytesToTeraBytes(System.Double)">
            <summary>
            Converts Gigabytes to Terabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.TeraBytesToMegaBytes(System.Double)">
            <summary>
            Converts Terabytes to Megabytes.
            </summary>
        </member>
        <member name="M:Easy.Common.UnitConverter.TeraBytesToGigaBytes(System.Double)">
            <summary>
            Converts Terabytes to Gigabytes.
            </summary>
        </member>
    </members>
</doc>
